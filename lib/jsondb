#!/usr/bin/env node

var async = require('async'),
	fs = require('fs'),
	events = require('events'),
	util = require('util'),
	flags = {
		CONNECTING: null,
		DELETING_DB: null
	}

/**
 * database class
 */
var DB = function jsondb(){

	events.EventEmitter.call(this)
	var self = this

	//@public
	this.dbname = null
	this.database = null
	this.storage = '.'
	this.handle = null

	//@public close connection
	this.close = function(fn){

		this.dbname = null
		this.database = null
		this.storage = '.'
		this.handle = null
		if(fn)
			fn()
		return self
	}

	//@public connect to database
	this.connect = function(dbname, fn){

		flags.CONNECTING = true
		self.dbname = dbname
		self.database = getDBLocation(this.dbname)
		var _db = self.database
		var _dbname = dbname

		//check database file
		var exists = fs.existsSync(_db)

		if(!exists){
						
			var json = {
				dbname: _dbname,
				tables: {}
			}
			var str = JSON.stringify(json, null, 4)
			fs.writeFileSync(_db, str)

		}
		if(fn){
			fn()
		}
		return this
	}

	//@public create a table
	this.create = function(tblname, fn){

		var json = getJSON()
		json.tables[tblname] = []
		setJSON(json, fn)
	}

	this.delete_db = function(dbname, fn){

		var cb = fn,
			self = this
			_db = getDBLocation(dbname)

		flags.DELETING_DB = true

		//setup database filename
		this.database = _db

		fs.exists(this.database, function(exists){

			var _self = self
				_cb = cb
				_dbname = dbname

			if(exists){
				fs.unlink(_db, function(err){
					if(err)
						throw new Error(err)

					if(_self.dbname==_dbname)
						_self.close()

					if(_cb)
						_cb()
				})
			}
			else
				if(_cb)
					_cb()
		})
	}

	this.delete_table = function(tblname, fn){

		var j = getJSON()
		delete j.tables[tblname]
		setJSON(j, fn)
	}

	this.setStorage = function(path, fn){

		self.storage = path

		if(fn)
			fn()
		return this
	}

	this.update = function(tblname, data, fn){

		var j = getJSON()
		var cb = fn
		
		function pushData(){
			j.tables[tblname].push(data)
			setJSON(j, cb)
		}
		
		if(!j.tables[tblname])
			this.create(tblname, pushData)
		else
			pushData()
	}

	/**
	 * Handles all queries, does check for connection etc.
	 * @deprecated not in use in this version
	 */
	this.query = function(method){

		var _self = this
		var _method = method
		var _args = arguments

		//callback to see if db exists
		function queryCheck(ok){
			_self[method]( _args )
		}

		//check if connected
		if( method!="connect" )
			this.connected(queryCheck)
		queryCheck()
	}

	/**
	 * Check if connected, called by this.query
	 * @deprecated not in use in this version
	 * @private
	 */
	function connected(fn){
		var ok = true
		fn(ok)
	}

	/**
	 * Get the full path to the a database. Uses current storage
	 * @private
	 * @param  {string} dbname Required. Database name
	 * @return {string}        
	 */
	function getDBLocation(dbname){

		return process.cwd()+'/'+db.storage+'/'+dbname+'.json'
	}

	/**
	 * Get the current json object from database file
	 * @private
	 */
	function getJSON(){

		return require(db.database)
	}

	function setJSON(json, fn){

		var _json = JSON.stringify(json, null, 4),
			_cb = fn

		fs.writeFile(db.database, _json, {flag: 'w'}, function(err){
			if(err)
				throw new Error(err)
			if(_cb)
				_cb()
		})
	}

}
util.inherits(DB, events.EventEmitter)
var db = new DB()
var queue = []

/**
 * driver
 */
var driver = {

	close: function(fn){
		queue.push(db.close.bind(db, fn))
		return this
	},

	connect: function(dbname, fn){
		queue.push(db.connect.bind(db, dbname, fn))
		return this
	},

	create: function(tblname, fn){
		db.create(tblname, fn)
		return this
	},

	delete: function(what, val, fn){

		switch(what){

			case 'database':
				db.delete_db(val, fn)
				break;

			case 'table':
				db.delete_table(val, fn)
				break;
		}
	},
	
	getDB: function(){
		
		return db
	},

	update: function(tblname, data, fn){
		db.update(tblname, data, fn)
		return this
	},

	run: function(){
		
		console.log(queue)
	    async.series(queue, function(err, results){
	    	if(err)
	    		throw new Error(err)
	    	console.log('this is the callback')
	    })

		return null
	},

	setStorage: function(path, fn){
		queue.push(db.setStorage.bind(db, path, fn))
		return this
	}
}

module.exports = driver